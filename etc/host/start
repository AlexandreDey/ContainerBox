#!/bin/bash

CHROOT=""
XEPHYR=/usr/bin/Xephyr
XPRA=/usr/bin/xpra
LXC=/snap/bin/lxc
MKDIR=/bin/mkdir
CHMOD=/bin/chmod
CHOWN=/bin/chown
XORG=/usr/bin/Xorg
SUDO=/usr/bin/sudo
CUT=/usr/bin/cut
GREP=/bin/grep
REMOTE_VIEWER=/usr/bin/remote-viewer

function usage {
    echo "ContainerBox start --name(-n) NAME_OF_BOX --fullscreen(-f) yes|no --method(-m) xephyr|xpra|xspice|cli --clipboard(-c) no|DISPLAY"
    echo ""
    echo "--name [-n]: Name of the box to launch"
    echo "--fullscreen [-f]: Launch fullscreen display"
    echo "--method [-m]: Share a xephyr display, forward display via xpra, forward display via spice, or open a new terminal window"
    echo "--clipboard [-c]: Synchronize guest clipboard and host clipboard specified by DISPLAY"
    echo "--help [-h]: show this help"
}

function get_last_display {
    str1=$(ls /tmp/.X11-unix/ | tail -n1)
    str2=""

    echo "${str1/X/$str2}"
}

function get_spice_port {
    PORT=5900
    while [ "$(nmap localhost -p $PORT | $GREP open)" ]; do
        PORT=$(($PORT+1))
    done
    echo $PORT
}
function create_xspice {
    PORT=$2
    # Launch xspice server
    $LXC exec $1 -- Xspice --disable-ticketing :0 &>0 &
    
    echo "Waiting for server creation"
    $LXC config device remove $1 spice
	$LXC config device add $1 spice proxy listen="tcp:localhost:$PORT" connect="tcp:localhost:5900" bind=host
    while [ -z "$(nmap localhost -p $PORT | $GREP open)" ]; do
        echo "still closed"
        sleep 1
    done
}

function launch_xspice {
    PORT=$(get_spice_port)
    create_xspice $1 $PORT
    $REMOTE_VIEWER spice://localhost:$PORT -t "ContainerBox -- $1" &
}

function launch_xspice_fullscreen {
    PORT=$(get_spice_port)
    create_xspice $1 $PORT
    $REMOTE_VIEWER spice://localhost:$PORT --full-screen -t "ContainerBox -- $1" &
}

function sync_clipboard {
    XHOST=$1
    XGUEST=$2
    GUEST_NAME=$3
    WRITE_CLIP="/usr/bin/xclip -selection clipboard -in"
    READ_CLIP="/usr/bin/xclip -selection clipboard -out"

    COMMON_CLIP=' '
    KEEP_RUNNING=$($LXC exec $GUEST_NAME -- systemctl status lightdm | grep "active (running)")
    while [ -z "$KEEP_RUNNING" ]; do
        # Wait for lightdm to be started
        sleep 0.2
        KEEP_RUNNING=$($LXC exec $GUEST_NAME -- systemctl status lightdm | grep "active (running)")
    done
    echo "Starting Clipboard Sync"
    while [ ! -z "$KEEP_RUNNING" ]; do
        HOST_CLIP=$(DISPLAY=:$XHOST $READ_CLIP)
        
        # Clipboard has been updated by host
        if [ ! -z "$HOST_CLIP" ] && [ "$HOST_CLIP" != "$COMMON_CLIP" ]; then
            COMMON_CLIP="$HOST_CLIP"
            # Update guest clipboard
            printf "$HOST_CLIP" | DISPLAY=:$XGUEST $WRITE_CLIP
        fi
        GUEST_CLIP=$(DISPLAY=:$XGUEST $READ_CLIP)
        # Clipboard has been updated by guest
        if [ ! -z "$GUEST_CLIP" ] && [ "$GUEST_CLIP" != "$COMMON_CLIP" ]; then
            COMMON_CLIP=$GUEST_CLIP
            # Update host clipboard
            printf "$GUEST_CLIP" | DISPLAY=:$XHOST $WRITE_CLIP
        fi
        sleep 0.4
        KEEP_RUNNING=$($LXC exec $GUEST_NAME -- systemctl status lightdm | grep "active (running)")
    done
    echo "Ending Clipboard Sync"
} 


function create_xorg {
    echo $2
    $SUDO $XORG ":$2" $3 -noreset -terminate +extension GLX +extension RANDR +extension RENDER
	wait 
	# Remove the device once host is disconnected
	$LXC config device remove $1 "X$2"
}

function launch_xorg {
    last=$(get_last_display)
    display=$((last +1))

    create_xorg $1 $display &
    sleep 1

    # Ensure it is not already passed through
	$LXC config device remove $1 "X$display"
	$LXC config device add $1 "X$display" proxy listen="unix:@/tmp/.X11-unix/X0" connect="unix:@/tmp/.X11-unix/X$display" bind=container

    # Start shared clipboard
    if [ "$2" != "no" ]; then
        sync_clipboard $2 $display $1 &
    fi

	echo "Display :$display socket passed to $1"
}

function create_xephyr {
    $CHROOT $XEPHYR ":$2" $3 -glamor -title "ContainerBox -- $1" -screen 1200x800 -br -terminate -noreset +extension GLX +extension RANDR +extension RENDER
	wait 
	# Remove the device once host is disconnected
	$LXC config device remove $1 "X$2"
}

function launch_xephyr {
    last=$(get_last_display)
    display=$((last +1))

    create_xephyr $1 $display &
    sleep 1

    # Ensure it is not already passed through
	$LXC config device remove $1 "X$display"
	$LXC config device add $1 "X$display" proxy listen="unix:@/tmp/.X11-unix/X0" connect="unix:@/tmp/.X11-unix/X$display" bind=container

    # Start shared clipboard
    if [ "$2" != "no" ]; then
        sync_clipboard $2 $display $1 &
    fi

	echo "Display :$display socket passed to $1"
}

function launch_xephyr_fullscreen {
    last=$(get_last_display)
    display=$((last +1))

    create_xephyr $1 $display "-fullscreen" &
    sleep 1

    # Ensure it is not already passed through
	$LXC config device remove $1 "X$display"
	$LXC config device add $1 "X$display" proxy listen="unix:@/tmp/.X11-unix/X0" connect="unix:@/tmp/.X11-unix/X$display" bind=container

    # Start shared clipboard
    if [ "$2" != "no" ]; then
        sync_clipboard $2 $display $1 &
    fi

	echo "Display :$display socket passed to $1"
}

function create_xpra {
    # Launch xpra server
    $LXC exec $1 -- xpra start-desktop --xvfb="Xorg -noreset +extension GLX +extension RANDR +extension RENDER -logfile ./0.log -config /etc/xpra/xorg.conf :0" --bind-tcp=0.0.0.0:10000
    
    echo "Waiting for server creation"
    $LXC config device remove $1 xpra
	$LXC config device add $1 xpra proxy listen="tcp:localhost:10000" connect="tcp:localhost:10000" bind=host
    lxdip=$($LXC list | $GREP "| $1 " | $CUT -d'|' -f4 | $CUT -d' ' -f2)
    while [ -z "$(nmap $lxdip -p 10000 | $GREP open)" ]; do
        echo "still closed"
        sleep 1
    done
}

function launch_xpra {
    create_xpra $1
    lxdip=$($LXC list | $GREP "| $1 " | $CUT -d'|' -f4 | $CUT -d' ' -f2)
    xpra attach tcp/localhost:10000 --encoding=rgb --speed=100 &
}

function launch_xpra_fullscreen {
    create_xpra $1
    lxdip=$($LXC list | $GREP "| $1 " | $CUT -d'|' -f4 | $CUT -d' ' -f2)
    xpra attach tcp/localhost:10000 --encoding=rgb --speed=100 --desktop-fullscreen=True &
}

function start_lightdm {
    $LXC exec $1 -- systemctl start lightdm
}

function launch_terminal {
    if [ -f "/usr/bin/gnome-terminal" ]; then
        /usr/bin/gnome-terminal -- /bin/bash -c "lxc exec $1HOST -- bash || sh"
    elif [ -f "/usr/bin/tilix" ]; then
        /usr/bin/tilix -e lxc exec $1 -- bash || sh
    elif [ -f "/usr/bin/konsole" ]; then
        /usr/bin/konsole -e lxc exec $1 -- bash || sh
    elif [ -f "/usr/bin/xterm" ]; then
        /usr/bin/xterm -e lxc exec $1 -- bash || sh
    else 
        echo "[ERROR]: cannot find a supported terminal emulator"
        echo "Possible options are gnome-terminal, tilix, konsole and xterm"
        echo "If you want the one you are using to be available, please feel free to open an issue"
    fi
}

function launch {
    # Ensure Xorg has been stopped
    if [ "$2" = "xpra" ]; then
        $LXC exec $1 -- killall Xorg
    fi
    # Ensure Xspice has been stopped
    if [ "$2" = "xspice" ]; then
        $LXC exec $1 -- killall Xspice
    fi
    # fullscreen
    if [ "$3" = "yes" ] && [ "$2" = "xephyr" ]; then
        launch_xephyr_fullscreen $1 $4
    fi
    if [ "$3" = "yes" ] && [ "$2" = "xpra" ]; then
        launch_xpra_fullscreen $1
    fi
    if [ "$3" = "yes" ] && [ "$2" = "xspice" ]; then
        launch_xspice_fullscreen $1
    fi
    if [ "$3" = "yes" ] && [ "$2" = "xorg" ]; then
        launch_xorg $1 $4
    fi
    # Resizeable window
    if [ "$3" = "no" ] && [ "$2" = "xephyr" ]; then
        launch_xephyr $1 $4
    fi
    if [ "$3" = "no" ] && [ "$2" = "xpra" ]; then
        launch_xpra $1
    fi
    if [ "$3" = "no" ] && [ "$2" = "xspice" ]; then
        launch_xspice $1
    fi
    if [ "$3" = "no" ] && [ "$2" = "xorg" ]; then
        launch_xorg $1 $4
    fi

    if [ "$2" = "cli" ]; then
        launch_terminal $1
    else
        # launch lightdm
        start_lightdm $1
    fi
    
    

}

METHOD="xephyr"
FULLSCREEN="no"
SHARE_CLIP="no"

CMD=$0

while [[ $# -gt 0 ]]
do
key="$1"

if [ "$1" = "help" ]; then
    usage $0
    exit
fi

case $key in
    -m|--method)
    METHOD="$2"
    if [ "$2" = "xephyr" ] || [ "$2" = "xpra" ] || [ "$2" = "xspice" ] || [ "$2" = "xorg" ] || [ "$2" = "cli" ]; then
        METHOD="$2"
    else
        echo "Unknown value '$2' for parameter $key"
        exit
    fi
    shift # past argument
    shift # past value
    ;;
    -f|--fullscreen)
    if [ "$2" = "yes" ] || [ "$2" = "no" ]; then
        FULLSCREEN="$2"
    else
        echo "Unknown value '$2' for parameter $key"
        exit
    fi    
    shift # past argument
    shift # past value
    ;;
    -c|--clipboard)
    SHARE_CLIP="$2"
    shift # past argument
    shift # past value
    ;;
    -n|--name)
    NAME="$2"
    shift # past argument
    shift # past value
    ;;
    -h|--help)
    usage $CMD
    exit
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    usage $CMD
    exit
    ;;
esac
done

if [ -z $NAME ]; then
    echo "Provide at least the name of the box"
    exit 
fi

# Check if container exists
testing_life=$($LXC list | $GREP "| $NAME ")
if [ -z  "$testing_life" ]; then
    echo "$NAME does not exist !"
    exit
fi

# Start container if not running 
testing_life=$($LXC list | $GREP "| $NAME " | $GREP "RUNNING")
if [ -z "$testing_life" ]; then
    $LXC start $NAME
fi
testing_life=$($LXC list | $GREP "| $NAME " | $GREP "RUNNING")
if [ -z "$testing_life" ]; then
    echo "[ERROR] : Unable to start container"
    exit
fi

launch $NAME $METHOD $FULLSCREEN $SHARE_CLIP
