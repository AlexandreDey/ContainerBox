#!/bin/bash

KWIN='/usr/bin/kwin_wayland --windowed --xwayland'
LXC=/snap/bin/lxc
LS=/bin/ls  
GREP=/bin/grep
CUT=/usr/bin/cut
RM=/bin/rm
TOUCH=/bin/touch
CBOX=/etc/ContainerBox
XWAYLAND=/usr/bin/Xwayland
XHOST=/usr/bin/xhost
LXC_USER=$($GREP "lxd" /etc/subuid | $CUT -d':' -f2)

function get_last_display {
    str1=$(ls /tmp/.X11-unix/ | tail -n1)
    str2=""

    echo "${str1/X/$str2}"
}

function get_last_user_display {
    str1=$(ls -ln /tmp/.X11-unix/ | grep "$UID $UID" | tail -n1 | $CUT -d' ' -f10)
    str2=""

    echo "${str1/X/$str2}"
}
function get_main_display {
    str1=$DISPLAY
    str2=""

    echo "${str1/:/$str2}"
}


function check_display() {
    test=$($LS /run/user/$UID/wayland-$1)
    if [ -z "$test" ]; then
        echo "False"
        return
    fi
    echo "True"
}

function sync_clipboard {
    XHOST=$1
    XGUEST=$2
    GUEST_NAME=$3
    APP=$4
    WRITE_CLIP="/usr/bin/xclip -selection clipboard -in"
    READ_CLIP="/usr/bin/xclip -selection clipboard -out"

    COMMON_CLIP=' '
    CLIP_SYNC_PID=$PID
    echo "Starting Clipboard Sync"
    while [ -f ~/.clip_sync ]; do
        HOST_CLIP=$(DISPLAY=:$XHOST $READ_CLIP)
        
        # Clipboard has been updated by host
        if [ ! -z "$HOST_CLIP" ] && [ "$HOST_CLIP" != "$COMMON_CLIP" ]; then
            COMMON_CLIP="$HOST_CLIP"
            # Update guest clipboard
            printf "$HOST_CLIP" | DISPLAY=:$XGUEST $WRITE_CLIP
        fi
        GUEST_CLIP=$(DISPLAY=:$XGUEST $READ_CLIP)
        # Clipboard has been updated by guest
        if [ ! -z "$GUEST_CLIP" ] && [ "$GUEST_CLIP" != "$COMMON_CLIP" ]; then
            COMMON_CLIP=$GUEST_CLIP
            # Update host clipboard
            printf "$GUEST_CLIP" | DISPLAY=:$XHOST $WRITE_CLIP
        fi
        sleep 0.4
    done
    echo "Ending Clipboard Sync"
} 

function launch_app() {
    EXPORT="export XDG_RUNTIME_DIR=/run/user/$UID/"
    # if Wayland is passed through
    if [[ "$3" == *"WL"* ]]; then
        EXPORT="$EXPORT && export XDG_SESSION_TYPE=wayland && export WAYLAND_DISPLAY=wayland-0"
    fi
    # if X is passed through
    if [[ "$3" == *"X"* ]]; then
        EXPORT="$EXPORT && export DISPLAY=:0"
    fi

    # check if uid exists in container
    test=$($LXC exec $1 -- getent passwd $UID)
    if [ -z "$test" ]; then
        # create user
        $LXC exec $UID -- useradd ephemeral$UID --uid $UID --create-home --groups video
    fi

    # Execute command
    $LXC exec $1 -- su --login "$(echo $test | $CUT -d':' -f1)" -c "$EXPORT && $2"


    if [ -z "$test" ]; then
        # Delete ephemeral user
        $LXC exec $UID -- userdel ephemeral$UID
    fi

}

function launch_insecure() {
    # if there is a host wayland, passthrough this one instead
    # This one is more secure, but Xwayland still is a X server, and thus any client can see whatever happens on the server
    if [ "$XDG_SESSION_TYPE" = "wayland" ] && [ ! -z $WAYLAND_DISPLAY ] ; then
        # Ensure XDG_RUNTIME_DIR is created and that user has access to it
        $LXC exec $1 -- mkdir -p /run/user/$UID/
        $LXC exec $1 -- chown -R $UID:$UID /run/user/$UID/

        # Passthrough host wayland
        $LXC config device add $1 wl0 proxy connect="unix:/run/user/$UID/$WAYLAND_DISPLAY" listen="unix:/run/user/$UID/wayland-0" uid=$UID gid=$UID bind=container
        # Passthrough host Xwayland screen
        lastX=$(get_main_display)
        $LXC config device add $1 Xwl proxy connect="unix:@/tmp/.X11-unix/X$lastX" listen="unix:@/tmp/.X11-unix/X0" bind=container

        launch_app $1 "$2" "XWL" 
        # Cleanup
        $LXC config device remove $1 Xwl
        $LXC config device remove $1 wl0 
        
    # No wayland session, passthrough X only. Vastly insecure, Xorg is not safe
    else
        # Passthrough host Xorg screen
        lastX=$(get_main_display)
        $LXC config device add $1 X$lastX proxy connect="unix:@/tmp/.X11-unix/X$lastX" listen="unix:@/tmp/.X11-unix/X0" bind=container

        launch_app $1 "$2" "X"

        # Cleanup
        $LXC config device remove $1 X$lastX
    fi    
}

function launch_secure() {
    # Passthrough host wayland display. Wayland is reasonably safe, but not every program is compatible with it
    if [ "$XDG_SESSION_TYPE" = "wayland" ] && [ ! -z $WAYLAND_DISPLAY ] ; then
        # Ensure XDG_RUNTIME_DIR is created and that user has access to it
        $LXC exec $1 -- mkdir -p /run/user/$UID/
        $LXC exec $1 -- chown -R $UID:$UID /run/user/$UID/

        # Passthrough host wayland
        $LXC config device add $1 wl0 proxy connect="unix:/run/user/$UID/$WAYLAND_DISPLAY" listen="unix:/run/user/$UID/wayland-0" uid=$UID gid=$UID bind=container
        
        launch_app $1 "$2" "WL"

        # Cleanup
        $LXC config device remove $1 wl0 
    
    else
        >&2 echo "[ERROR]: 'secure' mode requires to be running on a Wayland session. You can still run in 'nested' mode for maximal security"
    fi
}

function launch_nested() {
    WIDTH=1200
    HEIGHT=600
    # Specified width height
    if [ ! -z "$3" ];then 
        WIDTH=$(echo $3 | $CUT -d'x' -f1)
        HEIGHT=$(echo $3 | $CUT -d'x' -f2)
    fi
    if [ "$(check_display $1)" != "True" ]; then
        $KWIN -s wayland-$1 --width $WIDTH --height $HEIGHT &
        sleep 2
    fi
    # has the device been created
    if [ "$(check_display $1)" != "True" ]; then
        >&2 echo "[ERROR]: Cannot create nested Wayland display wayland-$1"
        exit
    fi

    # Allow access to Xwayland
    lastX=$(get_last_user_display)
    DISPLAY=:$lastX $XHOST +local:lxd
    # Ensure XDG_RUNTIME_DIR is created and that user has access to it 
    $LXC exec $1 -- mkdir -p /run/user/$UID
    $LXC exec $1 -- chown -R $UID:$UID /run/user/$UID

    # Cleanup
    $LXC config device remove $1 Xwl
    $LXC config device remove $1 wl0

    # Passthrough wayland Display
    $LXC config device add $1 wl0 proxy connect="unix:/run/user/$UID/wayland-$1" listen="unix:/run/user/$UID/wayland-0" uid=$UID gid=$UID  bind=container
    # Passthrough Xwayland
    $LXC config device add $1 Xwl proxy connect="unix:@/tmp/.X11-unix/X$lastX" listen="unix:@/tmp/.X11-unix/X0" bind=container

    # Start clipboard sharing
    $TOUCH ~/.clip_sync
    sync_clipboard $(get_main_display) $lastX $1 &

    launch_app $1 "$2" "XWL"

    # Stop Clipboard sharing
    $RM ~/.clip_sync

    # Cleanup
    $LXC config device remove $1 Xwl
    $LXC config device remove $1 wl0
    KWIN_PID=$(pidof kwin_wayland)
    if [ ! -z $KWIN_PID ];then
        kill -9 $KWIN_PID
    fi 
}

function launch() {
    if [ "$3" == "nested" ];then
        launch_nested $1 "$2" $4
    elif [ "$3" == "insecure" ];then
        launch_insecure $1 "$2"
    # default to secure
    else
        launch_secure $1 "$2"
    fi
}

function usage() {
    echo "ContainerBox runapp NAME_OF_BOX \"command arg1 arg2 ... argN\" secure(default)|nested|insecure [WIDTHxHEIGHT]"
    echo "secure = Passthrough only host Wayland. Requires running a wayland session"
    echo "nested = Passthrough a nested kwin_wayland and XWayland. Requires kwin_wayland"
    echo "insecure = Passthrough host Wayland (if available) and host Xorg server. Xorg is not secure, an attacker can spy on every input send to the xserver"
    echo "--help [-h]: show this help"
}

NAME=$1
COM=$2
MODE=$3
SIZE=$4

if [ -z $NAME ]; then
    echo "Provide at least the name of the box and the command to execute"
    usage $0
    exit 
fi

if [ -z "$COM" ]; then
    echo "Provide the command to execute"
    exit 
fi

if [ -z $MODE ]; then
    MODE="secure"
fi
if [ $MODE != "secure" ] && [ $MODE != "insecure" ] && [ $MODE != "nested" ]; then
    echo "Mode can only be 'secure', 'nested' or 'insecure', not '$MODE'. Defaulting to 'secure'"
    MODE="secure" 
fi

if [ -z $SIZE ]; then
    SIZE="1200x600"
fi
if [[ "$SIZE" != *"x"* ]];then
    echo "Wrong format for size '$SIZE'. Should be WIDTHxHEIGHT. Defaulting to 1200x600"
    SIZE="1200x600"
fi

if [ "$NAME" = "--help" ] || [ "$NAME" = "-h" ] || [ "$NAME" = "help" ];then
    usage $0
    exit 
fi

# Check if container exists
testing_life=$($LXC list | $GREP "| $NAME ")
if [ -z  "$testing_life" ]; then
    echo "$NAME does not exist !"
    exit
fi

# Start container if not running 
testing_life=$($LXC list | $GREP "| $NAME " | $GREP "RUNNING")
if [ -z "$testing_life" ]; then
    $LXC start $NAME
fi
testing_life=$($LXC list | $GREP "| $NAME " | $GREP "RUNNING")
if [ -z "$testing_life" ]; then
    echo "[ERROR] : Unable to start container"
    exit
fi

echo "launch $NAME \"$COM\" $MODE $SIZE"
launch $NAME "$COM" $MODE $SIZE